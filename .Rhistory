library(devtools)
library("devtools")
install("C:/Users/thibv/Desktop/Stage/rRice" build_vignettes = TRUE)
install("C:/Users/thibv/Desktop/Stage/rRice", build_vignettes = TRUE)
library("rRice")
library("rRice")
library("rRice")
createExperiment()
vignette
vignette("rRice")
locus <- data.frame(ch = c("1"), st = c("148907"), end = c("248907"))
experiment <- createExperiment("newExperiment", locus)
listIds <- lapply(1 : nrow(locus),
FUN = function(x) getIds(x, locus))
getIds <- function (i, locusList) {
##PATH for package when it will be installed -> when it will be released
path <- system.file("python",
"run.py",
package = "rRice")
##manage the spaces -> for example "Program Files" under windows will
##generate an error because with system2 we generate a command line
##with multiple arguments in one string.
if (Sys.info()["sysname"] == "Windows"){
path <- shortPathName(path)
}
listIds <- data.frame()
#path2Script = paste(c(path), collapse = '')
ch = as.character(locusList[i,1])
start = as.character(locusList[i,2])
end = as.character(locusList[i,3])
if (ch != "" && start != "" && end != "") {
##Call run.py from python
if (Sys.info()["sysname"] == "Windows"){
args = c(path, ch, start, end, "call_snpSeek", "None")
cmd <- findpython::find_python_cmd()
rOutput = system2(command = cmd, args=args, stdout = TRUE)
}
else {
args = c(ch, start, end, "call_snpSeek", "None")
rOutput = system2(command = path, args=args, stdout = TRUE)
}
#rOutput = system2(command=path, args=args, stdout=TRUE)
lapply(1 : length(rOutput),
function(x) returnError(rOutput[x]))
rOutput <- lapply(1 : length(rOutput),
function(x) getOutPutJSON(rOutput[x]))
rOutput[sapply(rOutput, is.null)] <- NULL
##print(rOutput)
if (length(rOutput) > 0) {
#print(rOutput)
#jsonOutput <- fromJSON(rOutput[[1]])
listIds <- lapply(1 : length(rOutput),
FUN = function(x) id(rOutput[[x]]))
}
##Remove all the NULL object from the list
listIds[sapply(listIds, is.null)] <- NULL
##remove double ids
listIds <- lapply(1 : length(listIds),
FUN = function(x) noDoubleIds(listIds[[x]]))
##to get only one list !!
liste <- list()
lapply(1 : length(listIds),
FUN = function(x){liste <<- append(liste,listIds[[x]])})
##print(liste)
return (liste)
}
else {
return (list())
}
}
experiment <- createExperiment("newExperiment", locus)
##Remove all the NULL object from the list
listIds[sapply(listIds, is.null)] <- NULL
listIds <- lapply(1 : nrow(locus),
FUN = function(x) getIds(x, locus))
listIds <- lapply(1 : nrow(locus),
FUN = function(x) getIds(x, locus))
returnError <- function (outPut) {
if(outPut == "Website maintenance"){
print(outPut)
}
if (outPut == "Bad request")
print(outPut)
if (outPut == "Forbidden")
print(outPut)
if (outPut == "Not found")
print(outPut)
if (outPut == "Too Many Requests")
print(outPut)
if (outPut == "Internal Server Error")
print(outPut)
if (outPut == "Service Unavailable")
print(outPut)
if (outPut == "Gateway Timeout")
print(outPut)
if (outPut == "HTTP Version Not Supported")
print(outPut)
if (outPut == "Unknow internet error")
print(outPut)
#else if (outPut == "on telecharege")
#    print(outPut)
}
returnError <- function (outPut) {
if(outPut == "Website maintenance"){
print(outPut)
}
if (outPut == "Bad request")
print(outPut)
if (outPut == "Forbidden")
print(outPut)
if (outPut == "Not found")
print(outPut)
if (outPut == "Too Many Requests")
print(outPut)
if (outPut == "Internal Server Error")
print(outPut)
if (outPut == "Service Unavailable")
print(outPut)
if (outPut == "Gateway Timeout")
print(outPut)
if (outPut == "HTTP Version Not Supported")
print(outPut)
if (outPut == "Unknow internet error")
print(outPut)
#else if (outPut == "on telecharege")
#    print(outPut)
}
listIds <- lapply(1 : nrow(locus),
FUN = function(x) getIds(x, locus))
getOutPutJSON <- function (outPut) {
if (identical(substr(outPut,0,1),'{')) {
return(outPut)
}
else if (substr(outPut, nchar(outPut), nchar(outPut)) == "}"){
return(outPut)
}
}
listIds <- lapply(1 : nrow(locus),
FUN = function(x) getIds(x, locus))
noDoubleIds <- function (id) {
##print(id[[1]]) -> id
##print(id[[2]]) -> msu7Name
##print(id)
msu7Name <- as.character(id[[2]])
iricname <- as.character(id[[3]])
id <- as.character(id[[1]])
##for the ids like "Os01g0115500,Os01g0115566" (the double ids)
##we only test the first id
if(grepl(',', id))
{
ids <- strsplit(id, ",")
id <- ids[[1]][[1]]
id1 <- ids[[1]][[2]]
liste <- list(id,id1)
return(list(list(id,msu7Name,iricname),list(id1,msu7Name,iricname)))
}
else {
return(list(list(id,msu7Name,iricname)))
}
}
listIds <- lapply(1 : nrow(locus),
FUN = function(x) getIds(x, locus))
listIds <- lapply(1 : nrow(locus),
FUN = function(x) getIds(x, locus))
lapply(1 : nrow(locus),
+                   FUN = function(x) getIds(x, locus))
getIds(1, locus)
getIds(1, locus)
path <- system.file("python",
"run.py",
package = "rRice")
if (Sys.info()["sysname"] == "Windows"){
path <- shortPathName(path)
}
listIds <- data.frame()
ch = as.character(locusList[i,1])
start = as.character(locusList[i,2])
end = as.character(locusList[i,3])
locusList  <- locus
ch = as.character(locusList[i,1])
start = as.character(locusList[i,2])
end = as.character(locusList[i,3])
install("C:/Users/thibv/Desktop/Stage/rRice" build_vignettes = TRUE)
install("C:/Users/thibv/Desktop/Stage/rRice", build_vignettes = TRUE)
library("rRice")
locus <- data.frame(ch = c("1"), st = c("148907"), end = c("248907"))
experiment <- createExperiment("newExperiment", locus)
View(getIds)
remove(list())
rm(list=ls())
locus <- data.frame(ch = c("1"), st = c("148907"), end = c("248907"))
experiment <- createExperiment("newExperiment", locus)
getIds
#' getIds
#'
#' This function is called for each locus and has to return the list of ids
#' present in the locus
#'
#' @param i number
#' @param locusList list
#' @return This function will return a list with all the ids from a locus
#' @importFrom jsonlite fromJSON
#' @importFrom findpython find_python_cmd
#' @rdname getIds-function
getIds <- function (i, locusList) {
##PATH for package when it will be installed -> when it will be released
path <- system.file("python",
"run.py",
package = "rRice")
##manage the spaces -> for example "Program Files" under windows will
##generate an error because with system2 we generate a command line
##with multiple arguments in one string.
if (Sys.info()["sysname"] == "Windows"){
path <- shortPathName(path)
}
listIds <- data.frame()
#path2Script = paste(c(path), collapse = '')
ch = as.character(locusList[i,1])
start = as.character(locusList[i,2])
end = as.character(locusList[i,3])
if (ch != "" && start != "" && end != "") {
##Call run.py from python
if (Sys.info()["sysname"] == "Windows"){
args = c(path, ch, start, end, "call_snpSeek", "None")
cmd <- findpython::find_python_cmd()
rOutput = system2(command = cmd, args=args, stdout = TRUE)
}
else {
args = c(ch, start, end, "call_snpSeek", "None")
rOutput = system2(command = path, args=args, stdout = TRUE)
}
#rOutput = system2(command=path, args=args, stdout=TRUE)
lapply(1 : length(rOutput),
function(x) returnError(rOutput[x]))
rOutput <- lapply(1 : length(rOutput),
function(x) getOutPutJSON(rOutput[x]))
rOutput[sapply(rOutput, is.null)] <- NULL
##print(rOutput)
if (length(rOutput) > 0) {
#print(rOutput)
#jsonOutput <- fromJSON(rOutput[[1]])
listIds <- lapply(1 : length(rOutput),
FUN = function(x) id(rOutput[[x]]))
}
##Remove all the NULL object from the list
listIds[sapply(listIds, is.null)] <- NULL
##remove double ids
listIds <- lapply(1 : length(listIds),
FUN = function(x) noDoubleIds(listIds[[x]]))
##to get only one list !!
liste <- list()
lapply(1 : length(listIds),
FUN = function(x){liste <<- append(liste,listIds[[x]])})
##print(liste)
return (liste)
}
else {
return (list())
}
}
rm(list=ls())
rm(ls())
if (Sys.info()["sysname"] == "Windows"){
path <- shortPathName(path)
}
path <- system.file("python",
"run.py",
package = "rRice")
if (Sys.info()["sysname"] == "Windows"){
path <- shortPathName(path)
}
View(path)
path <- system.file("python",
"run.py",
package = "rRice")
path
if (Sys.info()["sysname"] == "Windows"){
path <- shortPathName(path)
}
path
load("C:/Users/thibv/Desktop/Stage/mmm.RData")
load("C:/Users/thibv/Desktop/Stage/mmm.RData")
rm(json,json2,listIds)
rm(erreur,aors,huit,nbdb)
locusList
View(locusList)
View(locusList)
View(locusList)
View(locusList)
View(locusList)
View(locusList)
save.image("C:/Users/thibv/Desktop/Stage/mmm.RData")
load("C:/Users/thibv/Desktop/Stage/rRice/.RData")
setwd(cheminRrice)
library(rRice)
createExperiment
createExperiment("",locusList)
